A1: We recognise Python as a general purpose and high-level programming language because :
    * python is the most popular programming language which we can use in several areas 
	  such as data science, artificial intelligence, machine learning, web development,etc
	  a general-purpose language is a kind of computer language, that can be used in numerous
	  areas and several kinds of works can be done with the help of these programming languages.
	* Python is also a High-Level Programming Language because:
	  1. Python is simple to use with an easy and appealing syntax
	  2. Python runs on any forum or and is compatible with 21 platform including unix,linux etc.
	  3. Python has Extensive standard library i.e provides large standard libraries covering vast topics
	  4. python is simple to learn and to use for newcomers
	  5. Python is the go-to language for rapid growth and critical technologies like machine learning and artificial intelligence.

A2: Python is called a dynamically typed language because:
    We don't have to declare the type of a variable or manage the memory while assigning a value to a variable in Python.
	Other languages like C, C++,Java, etc.., there is a strict declaration of variables before assigning values to them.

A3: Python Pros :
    Beginner-friendly
    Large Community
    Flexible and Extensible
    Extensive Libraries
    Embeddable
    Highly Scalable
	
    Python Cons:
    Slower than compiled languages
    High memory consumption	
	Complex multithreading
	Garbage collection leads to potential memory losses
	Security
	
A4: Python is applicable in :
    1. Data Science
	2. Automation
	3. Application Development 
	4. AI & Machine Learning 
	5. Audio/Video Applications ex: spotify
	6. Console Applications
	7. Desktop GUI
	
A5: Python has no command for declaring a variable.
    A variable is created the moment you first assign a value to it.
	Variables do not need to be declared with any particular type, and can even change type after they have been set.
	
A6: Syntax:
    a=input("Enter your name")

A7: By default input() function helps in taking user input as string. If any user wants to take input as int or float, we just need to typecast it.

A8: in Python, typecast is nothing but Explicit Type Conversion, where we use predefined Python functions such as float (), str (), int (), etc, 
    to convert an objectâ€™s data type from its original data type to our required data type

A9: yes,by separating the input by space and using split function
    Sysntax:
	a,b=input(Enter two characters separated by space:').split()
	
A10: Python has a set of keywords that are reserved words that cannot be used as variable names, function names, or any other identifiers.

A11: NO,
     For example or is a reserved keyword in python which is a logical operatorand is used 
	 for that specific function now if i assing or=5 it will cause a syntax error when we execute the program.

A12: Indentation refers to implementing proper spaces and tabs at starting any statement, method and block of code 
     in the python programming language.Due to these indentations, we can easily identify the beginning point and at the endpoint 
	 of any conditional loop, functions, if-else statements and so on.
	 
A13: print() function is used for printing output in python

A14: Python Operators in general are used to perform operations on values and variables. These are standard symbols used for the purpose of 
     logical and arithmetic operations.
	 Types of Operators in Python are:
	 Arithmetic Operators
	 Comparison Operators
	 Logical Operators
	 Bitwise Operators
	 Assignment Operators 
	 Identity Operators
	 Membership Operators
	 
A15: /	Division (float): divides the first operand by the second -gives a float value.
     //	Division (floor): divides the first operand by the second -gives a rounded value to lower number.

A16: print("```\niNeuroniNeuroniNeuroniNeuron\n```")

A17: a=int(input("Enter a number"))
     if a%2==0:
         print("even")
     else:
         print("odd")
		 
A18: and,or,not these three operators are known as boolean operator in python.These operators connect Boolean expressions (and objects) 
     to create compound Boolean expressions.
	 
A19: 1 or 0  output- 1
     0 and 0 outout- 0
	 True and False and True output - False
	 1 or 0 or 0 output - 1
	 
A20: Conditional statements are series of condition that are apllied or are in place and if  a condition is satisfied that particular block of code
     executes to produce a result three conditional statement keyword are if,elif,else.
	 
A21: The simplest and most used conditional statement in Python is the "if " statement. A lot of the times, you have to decide whether to do "A " or do "B ". 
     The "if " statement, as its name suggests evaluates the expression.
	 Else conditional statement is a simple response to the "if " conditional statement such as if this does not happen what else would? Therefore, 
	 whenever the "if " statement returns False and conditional block from "if " skips, the conditional block from "else " executes.
	 Elif is a rather unique term as other programming languages donâ€™t use it. Other programming languages use "else if " to put up one more condition. 
	 While Python combines "else and if " and makes it an "elif " conditional statement.
	 
A22: age=int(input("Enter an age"))
     if age>=18:
        print("I can vote")
     else:
        print("I can't vote")
		
A23:numbers = [12, 75, 150, 180, 145, 525, 50]
    sum=0
    for i in range(len(numbers)):
          if(numbers[i]%2==0):
                 sum=sum+numbers[i]
    print(sum)

A24:a,b,c=input("Enter 3 numbers with space").split()
    print(max(int(a),int(b),int(c)))
	
A25: numbers = [12, 75, 150, 180, 145, 525, 50]
     for i in range(len(numbers)):
     if(numbers[i]>500):
         break
     if(numbers[i]%5==0 and numbers[i]<=150):
         print(numbers[i])

A26: A string is a sequence of Characters. Strings in python are surrounded by either single quotation marks, or double quotation marks.
     Syntax:
	 a='name'
	 b="surname"

A27: we access the string using its index as :
     a="apple a day"
     b=a.index("day")
     c=a[b:len(a)]
     print(c)

A28: a="Big Data iNeuron"
     b=a.split()
     print(b[2])

A29: a="Big Data iNeuron"
     b=a.split()
     print(b[2][::-1])
	 
A30: a="Big Data iNeuron"
     print(a[::-1])//norueNi ataD giB
     b=a.split()
     c=b[2]+" "+b[1]+" "+b[0]
     print(c)//iNeuron Data Big
	 
A31: a=["apple","mango","orange"]
     a.remove("orange")
     print(a)//output-["apple","mango"]
     b="grapes"
     c=b.replace('s','')
     print(c)//output- grape
	
A32: An escape sequence is a sequence of characters that, when used inside a character or string i.e("" or ''), does not represent
     itself but is converted into another character or series of characters that may be difficult or impossible to express directly, 
	 like newline (\n), tab (\t), and so on.

A33: We can directly use print() function to print "iNeuron's Big Data Course" or assign it to a variable and print it.
    Syntax:
	 a="iNeuron's Big Data Course"
	 print(a)

A34:Lists are used to store multiple items in a single variable List items are ordered, changeable, and allow duplicate values List items are also indexed.
    ex:
	a=["apple","mango","orange"]

A35: creating  a list is similar to declaring a variable in python 
     we can use square brackects "[]"
	 ex:
	 a=["apple","mango","orange"]
	 or a=[]
	 or use list constructor
	 a=list(("apple","mango","orange"))
A36: we access the elements in a list using loops 
    or directly using index.
	ex:
	a=["apple","mango","orange"]
	for(i in a):
	     print(i)
	or
	print(a[1])
	or using combination of loop and index by geting the length of list using len()
	
A37: lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
     for i in range(len(lst)):
          if(type(lst[i])==int):
                continue
          elif(type(lst[i])==str):
                if(lst[i]=="iNeuron"):
                  print(i)
                  break
          elif(type(lst[i])==list):
               for j in range(len(lst[i])):
                     if(lst[i][j]=="iNeuron"):
                        print(i,j)
                        break
     or if you know the index
	 then print(lst[4][2])

A38: a=input("enter strings with space").split()
     print(len(a))
	 
A39: lst = ["Welcome", "to", "Data", "course"]
     lst.insert(2,"Big")
     print((lst))

A40: A Tuple is a collection of Python objects separated by commas. In some ways,
     a tuple is similar to a list in terms of indexing, nested objects, and repetition
	 but a tuple is immutable, unlike lists that are mutable.
	 
A41: We can declare tupple by:
     lst=("Welcome", "to", "Data", "course")

A42: no i am not able to add my name in the tupple because tupple is immutable i.e it
     cannot be modified or changed 
	 
A43: yes two tupple can be appended 
    lst=("Welcome", "to", "Data", "course")
    lst1=("ghtyu","abc")
    lst2=lst + lst1
    print(lst2)
	
A44:a=input("enter with space/tab").split()
    b=tuple(a)
    print(len(b))
	
A45: A set is an unordered and mutable collection of unique elements. 

A46: we can create a set using 
     set1={1,2,3,4,5}
	 
A47: set1={"abc","def","rog"}
     set1.add("iNeuron")
     print(set1)

A48: not possible as add function takes only one argument 

A49: update can be used to add multiple elements as well as merge 2 sets or alist into set

A50:clear() it is used to empty the set.

A51: frozenset() Method creates an immutable Set object from an iterable. It is a built-in Python function.
     As it is a set object therefore we cannot have duplicate values in the frozenset.
	 
A52: A normal set is mutable that is can be modified whereas frozenset is immutable i.e cannot be modified or changed.

A53: The union() method returns a new set with all items from both sets which we want to join

A54: Return a set that contains the items that exist in both sets/two sets.

A55: Dictionary in Python is a collection of keys values,
     used to store data values like a map, which, unlike other data types which hold only a single value as an element.

A56: In Python, the dictionary refers to a collection (unordered) of various data types. We use these for storing data values such as maps,
     and unlike other data types capable of holding only one value in the form of an element,a dictionary can hold the key:
	 value pair. The key value in a dictionary is present to make it comparatively more optimized.

A57: dict1={1:"abc",2:"def",3:"sde"}
    
A58: <class 'dict'>  --output

A59: a={1:"asd",2:"def",3:"frg"}
     a[4]="iup"
     a.update({5:"xcv"})
     print(a)

A60:a={1:"asd",2:"def",3:"frg"}
    c=a.keys()
    for i in c:
        print(a[i])
		
A61: a={1:{'a':"asd",'b':"subho",'c':"sub"},2:{'a':"asde",'b':"subhoe",'c':"sube"},3:{'a':"asdr",'b':"subhor",'c':"subr"}}
     b=a.values()
     for i in b:
         c=i.keys()
         for j in c:
             print(i[j])
			 
A62: get() will give the same result as a["key"] get() return the value of a particular key from dictionary.

A63: items() method is used to return the list with all dictionary keys with values.

A64: pop() is an inbuilt function in Python that removes and returns the last value from the List or the given index value. usde in indexed value ex: list,set.

A65: The popitem() method removes the item that was last inserted into the dictionary used in dictionary.

A66:  keys() function is used to get all keys in a key value pair in a dictionary.

A67: values() function is used to get all values in a key value pair in a dictionary.

A68: loops in Python are use to iterate through a list etc.

A69: for or while loop are used in python.

A70:  a while loop is used to execute a block of statements repeatedly until a given condition is satisfied.
      For loops are used for sequential traversal.

A71: continue statement is used to continue to next iteration continue is mostly used to if-else statement.

A72: break statement is used to exit out of the loop.

A73: The pass statement is a null statement. But the difference between pass and comment is that comment is ignored 
     by the interpreter whereas pass is not ignored. 
	 
A74: The Python range() function returns a sequence of numbers, in a given range. The most common use of it is to 
     iterate sequence on a sequence of numbers using Python loops.
	 
A75:a={1:"asd",2:"def",3:"frg"}
    c=a.keys()
    for i in c:
        print(a[i])
    
A76: def fact(n):
       if(n==1):
          return 1
       else:
          return n*fact(n-1)
     print(fact(int(input("Enter a number : "))))

A77: p,r,t=input("Please Enter principle, rate, and time with space").split()
     si=(float(p)*float(r)*float(t))/100
     print("simple interest :",si)
	 
A78: p,r,t=input("Please Enter principle, rate, and time with space").split()
     a=float(p)*(pow((1+(float(r)/100)),float(t)))
     print("compound interest amount : ",a)
	 
A79: n=int(input("Enter a number : "))
     c=0
     for i in range(2,n):
           if n==1:
              print("1 is not prime number")
           if n%i==0:
                c=c+1
                break
     if c>0:
        print("Not Prime")
     else:
        print("Prime")
		
A80: l=input("Enter a number : ")
     n1=len(l)
     n=int(l)
     k=n
     r=0
     while n>0:
        d=int(n%10)
    
        r=pow(d,n1)+r
    
        n=n/10
    if r==k:
       print("armstrong")
    else:
       print("not armstrong")

A81: def fibo(n):
         if n==1:
           return 0
         elif n==2:
           return 1
         elif n==3:
           return 1
         else:
           return fibo(n-1)+fibo(n-2)

     print(fibo(int(input("Enter a number : "))))
	 
A82:a=input("enter element with space").split()
    print("original : ",a)
    temp=a[len(a)-1]
    a[len(a)-1]=a[0]
    a[0]=temp
    print("swapped : ",a)


A83:a=input("enter element with space").split()
print("original : ",a)
b1,c1=input("enter position to be swapped with space ").split()
b=int(b1)-1
c=int(c1)-1
if b>=0 and c>=0 or b<len(a) and c<len(a):
    temp=a[c]
    a[c]=a[b]
    a[b]=temp
    

print("swapped : ",a)

A84:def klargest(nums,k):
    return quick(nums,0,len(nums)-1,len(nums)-k)
def getpos(a,i,j):
    s=i
    for k in range(i,j+1):
        if a[k]<=a[j]:
            temp=a[s]
            a[s]=a[k]
            a[k]=temp
            s=s+1
    return s-1
def quick(a,i,j,k):
    s=getpos(a,i,j)
    if s==k :
        return a[s]
    elif k<s:
        return quick(a,i,s-1,k)
    else:
        return quick(a,s+1,j,k)
print(klargest([2,25,3,6,56,12,34,100,89],3))

A85:a=[2,30,45,21,13,75,140,55]
    b=[]

    for i in range(len(a)):
            if i==0:
               b.append(a[i])
            else:
               b.append(a[i]+a[i-1])
    print(b)
	
A86:a=input("enter a string")
    b=""
    for i in a:
         b=i+b
    if a==b:
         print("palindrom")
    else:
         print("not palindrom")

A87:a=input("enter a string")
    b=int(input("enter a position"))
    c=""
    if b>=0 and b<len(a) :
          c=a.replace(a[b-1],'')
    print(c)
	
A88: a=input("enter a string")
     b=input("enter a substring to check")
     if b in a:
         print("present")
     else:
         print("not present")
		 
A89:a=input("enter string with space").split()
    b=int(input("enter length to compare"))
    for i in a:
        if len(i)>b:
             print(i)
			 
A90: my_dict = {'Apple' : [5,3,9, 2],
   'Mango' : [33, 52, 63, 78],
   'Orange' : [7, 2, 33],
   'Grape' : [120, 1, 55],
   'Bannana' : [56, 31, 89, 90]}

   print("original",my_dict)

   my_result = list(sorted({elem for val in my_dict.values() for elem in val}))

   print("unique",my_result)
   
A91: a={'abc':123,
        'def':345}
    b={'klm':567,
       'nop':879}
    a.update(b)
    print(a)
	
A92:b=[('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
    c=dict(b)
    print(c)
	
A93:list1 = [9, 5, 6]
    b=[]
    for i in list1:
         b.append((i,pow(i,3)))
    print(b)

A94:test_tuple1 = (7, 2)
    test_tuple2 = (7, 8)
    final=[]
    for i in test_tuple1:
         for j in test_tuple2:
               final.append((i,j))
    for i in test_tuple2:
         for j in test_tuple1:
                final.append((i,j))
     print(final)
	 
A95:a=[('for', 24), ('Geeks', 8), ('Geeks', 30)]
    smallest=0
    k=0
    b=[]
    for i in a:
        if k==0:
            smallest=i[1]
            b.insert(0,i)
            k=k+1
        elif i[1]<smallest:
        
             smallest=i[1]
             b.insert(0,i)
             k=k+1
        else:
           b.append(i)
           k=k+1
    
    print(b)
	
A96:for i in range(0,6):
         for j in range(0,i):
              print('*',' ',end=' ')
         print("\n")
		 
A97: l=5
     for i in range(0,6):
            for k in range(0,l):
                    print(' ',end=' ')
            l=l-1
            for j in range(0,i):
                    print('*',end=' ')
            print("\n")

A98: l=5
     for i in range(0,6):
          for k in range(0,l):
                print(' ',end=' ')
          l=l-1
          for j in range(0,i):
                print('*',' ',end=' ')
          print("\n")
		  
A99: for i in range(1,7):
           for j in range(1,i):
                 print(j,' ',end=' ')
            print("\n")
    
A100:  k=64
       for i in range(1,7):
            for j in range(1,i):
                  print(chr(k),' ',end=' ')
            k=k+1    
            print("\n")
    
    

