1. import pandas as pd
   df=pd.read_csv("C:\\Users\\SU20181941\\Downloads\\HRDataset_v14 (1).csv")
   print(df)
   
2. import pandas as pd

   details =[("subhojit",22,"kolkata"),
             ("abcd",21,"xys"),
             ("gfhd",43,"jhjf")]
   df=pd.DataFrame(details,columns=["Name","age","city"])

   datatypes = df.dtypes

   print(datatypes)
   
3. import pandas as pd

   record = {'Name' : ['subhojit','abcder','jjf','fdfd','fdf'],
             'Age' :  [26,23,21,45,32],
             'City' : ['kolkata','fgf','wew','jgg','tye']}

   dataframe = pd.DataFrame(record,columns=['Name','Age','City'])

   print(dataframe)

   rest_df= dataframe[dataframe['Age']<30]

   print(rest_df)
   
4. import pandas as pd

   record = {'Name' : ['subhojit','abcder','jjf','fdfd','fdf'],
             'Age' :  [26,23,21,45,32],
             'City' : ['kolkata','fgf','wew','jgg','tye']}

   dataframe = pd.DataFrame(record,columns=['Name','Age','City'])

   print(dataframe)

   dataframe.rename(columns ={'Age':'Ages','City':'Cities'},inplace=True)

   print(dataframe)
   
5. import pandas as pd

   record = {'Name' : ['subhojit','abcder','jjf','fdfd','fdf'],
             'Age' :  [26,23,21,45,32],
             'City' : ['kolkata','fgf','wew','jgg','tye']}

  dataframe = pd.DataFrame(record,columns=['Name','Age','City'])

  print(dataframe)

  dataframe.drop(['City'],axis=1,inplace=True)

  print(dataframe)
  
6. import pandas as pd

   record = {'Name' : ['subhojit','abcder','jjf','fdfd','fdf'],
             'Age' :  [26,23,21,45,32],
             'City' : ['kolkata','fgf','kolkata','jgg','tye']}

   dataframe = pd.DataFrame(record,columns=['Name','Age','City'])

   print(dataframe)

   print(dataframe.City.unique())
   
7. import pandas as pd
   import numpy as np
   record = {'Name' : ['subhojit','abcder','jjf','fdfd','fdf'],
             'Age' :  [26,23,21,45,32],
             'City' : ['kolkata','fgf',np.nan,'jgg',np.nan]}

   dataframe = pd.DataFrame(record,columns=['Name','Age','City'])

   print(dataframe)

   print("there are these many null  values",dataframe.City.isnull().sum())
   
8. import pandas as pd
   import numpy as np
   record = {'Name' : ['subhojit','abcder','jjf','fdfd','fdf'],
             'Age' :  [26,23,21,45,32],
             'City' : ['kolkata','fgf',np.nan,'jgg',np.nan]}

   dataframe = pd.DataFrame(record,columns=['Name','Age','City'])

   print(dataframe)


   dataframe.fillna("Delhi",inplace=True)
   dataframe.replace(to_replace=np.nan,value="Delhi",inplace=True)
    
   print(dataframe)
   
9. import pandas as pd
   record={'data' : [1,2,3,4,5],
           'value': ['A','B','C','D','E']}
   record1={'data' : [6,7,8],
             'value' : ['F','G','H']}

   df=pd.DataFrame(record,columns=['data','value'])
   df1=pd.DataFrame(record1,columns=['data','value'])


   VConcat=pd.concat([df,df1],axis=0)

    print(VConcat)
	
	axis is 0 to concat verticall and 1 to concat horizontally

10. import pandas as pd
    record={'data' : [1,2,3,4,5],
            'value': ['A','B','C','D','E']}
    record1={'data' : [1,2,3,4,5],
              'age' : [21,22,34,45,53]}

    df=pd.DataFrame(record,columns=['data','value'])
    df1=pd.DataFrame(record1,columns=['data','age'])

    print(df)
    print(df1)

    kd=df.merge(df1[['data','age']])

    print(kd)
	
11. import pandas as pd
    df=pd.read_csv("C:\\Users\\SU20181941\\Downloads\\Data_For_Final_ProjectIPLMatches_IPLBall\\IPLMatches+IPLBall\\IPL_matches.csv")
    #print(df)
    gk=df.groupby('city')
    print(gk.first())
	
	For aggregated output, return object with group labels as the index. Only relevant for DataFrame input. as_index=False is effectively 
	“SQL-style” grouped output
	
12. import pandas as pd
    import numpy as np
    df=pd.read_csv("C:\\Users\\SU20181941\\Downloads\\Data_For_Final_ProjectIPLMatches_IPLBall\\IPLMatches+IPLBall\\IPL_matches.csv")
    #print(df)

     print(pd.pivot_table(df,index=["team1","result"],values=["result_margin"],aggfunc=np.mean))
	 
13. import pandas as pd


     df = pd.DataFrame({
        'A': [1, 2, 3, 4, 5],
        'B': ['a', 'b', 'c', 'd', 'e'],
        'C': [1.1, '1.0', '1.3', 2, 5]})


    convert_dict = {'A': int,
                    'C': float
                    }
    print("Before conversion",df.dtypes)
    df = df.astype(convert_dict)
    print(df.dtypes)
	
14. 
    import pandas as pd


    age_list = [['Afghanistan', 1952, 8425333, 'Asia'],
                ['Australia', 1957, 9712569, 'Oceania'],
                ['Brazil', 1962, 76039390, 'Americas'],
                ['China', 1957, 637408000, 'Asia'],
                ['France', 1957, 44310863, 'Europe'],
                ['India', 1952, 3.72e+08, 'Asia'],
                ['United States', 1957, 171984000, 'Americas']]


    df = pd.DataFrame(age_list, columns=['Country', 'Year',
                                     'Population', 'Continent'])

    print(df)

    df1=df.sort_values(by=['Population'])

    print(df1)
	
15. import pandas as pd


     s = pd.Series([3,4,5],['earth','mars','jupiter'])
     k = pd.Series([1,2,3],['earth','mars','jupiter'])


     df = pd.DataFrame({'mass':s,'diameter':k})

     print(df)

    gk=df   --> 1st Method

    res = df.copy(deep=False)   ---> 2nd Method
    print(res)

    df['mass']['mars']=7

    print(res)
	
	When deep=False, a new object will be created without copying the calling object’s data 
	or index (only references to the data and index are copied). Any changes to the data of 
	the original will be reflected in the shallow copy (and vice versa).
	
	
16. 
   import pandas as pd
   import numpy as np


   dataFrame = pd.DataFrame({'Name': [' RACHEL ', ' MONICA ', ' PHOEBE ',
                                   ' ROSS ', 'CHANDLER', ' JOEY '],

                          'Age': [30, 35, 37, 33, 34, 30],

                          'Salary': [100000, 93000, 88000, 120000, 94000, 95000],

                        'JOB': ['DESIGNER', 'CHEF', 'MASUS', 'PALENTOLOGY',
                                'IT', 'ARTIST']})


   filtered_values = np.where((dataFrame['Salary']>=100000) & (dataFrame['Age']< 40) & (dataFrame['JOB'].str.startswith('D')))
   print(dataFrame.loc[(dataFrame['Salary']>=88000) & (dataFrame['Age']< 40) & (dataFrame['JOB'].str.startswith('M')),
                    ['Name','JOB']])
   print(dataFrame.query('Salary  <= 100000 & Age < 40 & JOB.str.startswith("C").values'))
   print(dataFrame.loc[filtered_values])
   print(dataFrame[dataFrame.eval("Salary <=100000 & (Age <40) & JOB.str.startswith('A').values")]) 
	
17. import pandas as pd


    age_list = [['Afghanistan', 1952, 8425333, 'Asia'],
                ['Australia', 1957, 9712569, 'Oceania'],
                ['Brazil', 1962, 76039390, 'Americas'],
                ['China', 1957, 637408000, 'Asia'],
                ['France', 1957, 44310863, 'Europe'],
                ['India', 1952, 3.72e+08, 'Asia'],
                ['United States', 1957, 171984000, 'Americas']]


     df = pd.DataFrame(age_list, columns=['Country', 'Year',
                                          'Population', 'Continent'])

    print(df)
    print(df['Population'].mean())	

18. 
    import pandas as pd


    age_list = [['Afghanistan', 1952, 8425333, 'Asia'],
                ['Australia', 1957, 9712569, 'Oceania'],
                ['Brazil', 1962, 76039390, 'Americas'],
                ['China', 1957, 637408000, 'Asia'],
                ['France', 1957, 44310863, 'Europe'],
                ['India', 1952, 3.72e+08, 'Asia'],
                ['United States', 1957, 171984000, 'Americas']]


    df = pd.DataFrame(age_list, columns=['Country', 'Year',
                                         'Population', 'Continent'])

     print(df['Population'].std())

19. 
    import pandas as pd


    data = pd.DataFrame({
        "column1": [12, 23, 45, 67],
        "column2": [67, 54, 32, 1],
        "column3": [34, 23, 56, 23]
    }
    )

    print(data)


    print(data['column1'].corr(data['column2']))
	
20.
    
     import pandas as pd


     employees = [('Stuti', 28, 'Varanasi', 20000),
                  ('Saumya', 32, 'Delhi', 25000),
                  ('Aaditya', 25, 'Mumbai', 40000),
                  ('Saumya', 32, 'Delhi', 35000),
                  ('Saumya', 32, 'Delhi', 30000),
                  ('Saumya', 32, 'Mumbai', 20000),
                  ('Aaditya', 40, 'Dehradun', 24000),
                  ('Seema', 32, 'Delhi', 70000)
                  ]


     df = pd.DataFrame(employees,
                 columns =['Name', 'Age',
                           'City', 'Salary'])


     result = df[["Name", "Age", "Salary"]]


     print(result)

21. import pandas as pd


    employees = [('Stuti', 28, 'Varanasi', 20000),
                 ('Saumya', 32, 'Delhi', 25000),
                 ('Aaditya', 25, 'Mumbai', 40000),
                 ('Saumya', 32, 'Delhi', 35000),
                 ('Saumya', 32, 'Delhi', 30000),
                 ('Saumya', 32, 'Mumbai', 20000),
                 ('Aaditya', 40, 'Dehradun', 24000),
                 ( 'Seema', 32, 'Delhi', 70000)
                ]


    df = pd.DataFrame(employees,
                      columns=['Name', 'Age',
                               'City', 'Salary'])


    result = df.iloc[[2, 3, 5]]


    print(result)
    
22. 
    import pandas as pd


    students = [('Ankit', 22, 'Up', 'Geu'),
                ('Ankita', 31, 'Delhi', 'Gehu'),
                ('Rahul', 16, 'Tokyo', 'Abes'),
                ('Simran', 41, 'Delhi', 'Gehu'),
                ('Shaurya', 33, 'Delhi', 'Geu'),
                ('Harshita', 35, 'Mumbai', 'Bhu' ),
                ('Swapnil', 35, 'Mp', 'Geu'),
                ('Priya', 35, 'Uk', 'Geu'),
                ('Jeet', 35, 'Guj', 'Gehu'),
                ('Ananya', 35, 'Up', 'Bhu')
                ]


    details = pd.DataFrame(students, columns =['Name', 'Age',
                                           'Place', 'College'],
                           index =[ 'b', 'c', 'a', 'e', 'f',
                                    'g', 'i', 'j', 'k', 'd'])


    rslt_df = details.sort_values(by = 'Name')


    print(rslt_df)
	
23. 
   
    import pandas as pd


     df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],
                        'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],
                        'Cost':[10000, 5000, 15000, 2000]})


    print(df)


    df['Discounted_Price'] = df.apply(lambda row: row.Cost -
                                  (row.Cost * 0.1), axis = 1)


    print(df)
	
24.  
   import pandas as pd

    data = {
            "A": ["TeamA", "TeamB", "TeamB", "TeamC", "TeamA"],
            "B": [50, 40, 40, 30, 50],
            "C": [True, False, False, False, True]
            }

    df = pd.DataFrame(data)

     display(df.drop_duplicates())
	 
25. 
    The loc() function is label based data selecting method which means that we have to pass the name of the row or column which we want to select. 
	The iloc() function is an indexed-based selecting method which means that we have to pass an integer index in the method to select a specific row/column. 
	display(data.loc[(data.Brand == 'Maruti') & amp
                 (data.Mileage & gt
                  25)])
	display(data.iloc[[0, 2, 4, 7]])

















